// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/28/2018 16:35:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    GCD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module GCD_vlg_sample_tst(
	A_maior_B,
	A_menor_B,
	clk,
	EQ,
	RST,
	sampler_tx
);
input  A_maior_B;
input  A_menor_B;
input  clk;
input  EQ;
input  RST;
output sampler_tx;

reg sample;
time current_time;
always @(A_maior_B or A_menor_B or clk or EQ or RST)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module GCD_vlg_check_tst (
	FIM,
	LA,
	LB,
	OP,
	SA,
	SB,
	sampler_rx
);
input  FIM;
input  LA;
input  LB;
input  OP;
input  SA;
input  SB;
input sampler_rx;

reg  FIM_expected;
reg  LA_expected;
reg  LB_expected;
reg  OP_expected;
reg  SA_expected;
reg  SB_expected;

reg  FIM_prev;
reg  LA_prev;
reg  LB_prev;
reg  OP_prev;
reg  SA_prev;
reg  SB_prev;

reg  FIM_expected_prev;
reg  LA_expected_prev;
reg  LB_expected_prev;
reg  OP_expected_prev;
reg  SA_expected_prev;
reg  SB_expected_prev;

reg  last_FIM_exp;
reg  last_LA_exp;
reg  last_LB_exp;
reg  last_OP_exp;
reg  last_SA_exp;
reg  last_SB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	FIM_prev = FIM;
	LA_prev = LA;
	LB_prev = LB;
	OP_prev = OP;
	SA_prev = SA;
	SB_prev = SB;
end

// update expected /o prevs

always @(trigger)
begin
	FIM_expected_prev = FIM_expected;
	LA_expected_prev = LA_expected;
	LB_expected_prev = LB_expected;
	OP_expected_prev = OP_expected;
	SA_expected_prev = SA_expected;
	SB_expected_prev = SB_expected;
end



// expected FIM
initial
begin
	FIM_expected = 1'bX;
	FIM_expected = #999000 1'b0;
end 

// expected LA
initial
begin
	LA_expected = 1'bX;
	LA_expected = #999000 1'b0;
end 

// expected LB
initial
begin
	LB_expected = 1'bX;
	LB_expected = #999000 1'b0;
end 

// expected OP
initial
begin
	OP_expected = 1'bX;
	OP_expected = #999000 1'b0;
end 

// expected SA
initial
begin
	SA_expected = 1'bX;
	SA_expected = #999000 1'b0;
end 

// expected SB
initial
begin
	SB_expected = 1'bX;
	SB_expected = #999000 1'b0;
end 
// generate trigger
always @(FIM_expected or FIM or LA_expected or LA or LB_expected or LB or OP_expected or OP or SA_expected or SA or SB_expected or SB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected FIM = %b | expected LA = %b | expected LB = %b | expected OP = %b | expected SA = %b | expected SB = %b | ",FIM_expected_prev,LA_expected_prev,LB_expected_prev,OP_expected_prev,SA_expected_prev,SB_expected_prev);
	$display("| real FIM = %b | real LA = %b | real LB = %b | real OP = %b | real SA = %b | real SB = %b | ",FIM_prev,LA_prev,LB_prev,OP_prev,SA_prev,SB_prev);
`endif
	if (
		( FIM_expected_prev !== 1'bx ) && ( FIM_prev !== FIM_expected_prev )
		&& ((FIM_expected_prev !== last_FIM_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FIM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FIM_expected_prev);
		$display ("     Real value = %b", FIM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_FIM_exp = FIM_expected_prev;
	end
	if (
		( LA_expected_prev !== 1'bx ) && ( LA_prev !== LA_expected_prev )
		&& ((LA_expected_prev !== last_LA_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LA_expected_prev);
		$display ("     Real value = %b", LA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LA_exp = LA_expected_prev;
	end
	if (
		( LB_expected_prev !== 1'bx ) && ( LB_prev !== LB_expected_prev )
		&& ((LB_expected_prev !== last_LB_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LB_expected_prev);
		$display ("     Real value = %b", LB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LB_exp = LB_expected_prev;
	end
	if (
		( OP_expected_prev !== 1'bx ) && ( OP_prev !== OP_expected_prev )
		&& ((OP_expected_prev !== last_OP_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp = OP_expected_prev;
	end
	if (
		( SA_expected_prev !== 1'bx ) && ( SA_prev !== SA_expected_prev )
		&& ((SA_expected_prev !== last_SA_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SA_expected_prev);
		$display ("     Real value = %b", SA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SA_exp = SA_expected_prev;
	end
	if (
		( SB_expected_prev !== 1'bx ) && ( SB_prev !== SB_expected_prev )
		&& ((SB_expected_prev !== last_SB_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SB_expected_prev);
		$display ("     Real value = %b", SB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SB_exp = SB_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module GCD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A_maior_B;
reg A_menor_B;
reg clk;
reg EQ;
reg RST;
// wires                                               
wire FIM;
wire LA;
wire LB;
wire OP;
wire SA;
wire SB;

wire sampler;                             

// assign statements (if any)                          
GCD i1 (
// port map - connection between master ports and signals/registers   
	.A_maior_B(A_maior_B),
	.A_menor_B(A_menor_B),
	.clk(clk),
	.EQ(EQ),
	.FIM(FIM),
	.LA(LA),
	.LB(LB),
	.OP(OP),
	.RST(RST),
	.SA(SA),
	.SB(SB)
);

// A_maior_B
initial
begin
	A_maior_B = 1'b0;
	A_maior_B = #1500000 1'b1;
	A_maior_B = #500000 1'b0;
end 

// A_menor_B
initial
begin
	A_menor_B = 1'b0;
	A_menor_B = #3000000 1'b1;
	A_menor_B = #500000 1'b0;
end 

// EQ
initial
begin
	EQ = 1'b0;
	EQ = #4500000 1'b1;
	EQ = #500000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #250000 1'b1;
	#250000;
end 

// RST
initial
begin
	RST = 1'b1;
	RST = #500000 1'b0;
end 

GCD_vlg_sample_tst tb_sample (
	.A_maior_B(A_maior_B),
	.A_menor_B(A_menor_B),
	.clk(clk),
	.EQ(EQ),
	.RST(RST),
	.sampler_tx(sampler)
);

GCD_vlg_check_tst tb_out(
	.FIM(FIM),
	.LA(LA),
	.LB(LB),
	.OP(OP),
	.SA(SA),
	.SB(SB),
	.sampler_rx(sampler)
);
endmodule

